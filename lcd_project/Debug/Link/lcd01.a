;// 파일명 : lcd01.c
;// 설  명 : LCD에 임의의 문자열을 출력한다.
;// 주  의 : 포트를 직접 제어하여 LCD를 사용한다.
;//	    RS  - PD0
;//	    R/W - PD1
;//	    EN  - PD2
;//          DB4  - PD4
;//	    DB5  - PD5
;//	    DB6  - PD6
;//	    DB7  - PD7
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define FUNCSET       0x28	// Function Set
;#define ENTMODE	      0x06	// Entry Mode Set
;#define ALLCLR        0x01	// All Clear
;#define DISPON        0x0c 	// Display On
;#define LINE2         0xC0	// 2nd Line Move
;
;void LCD_init(void);
;void LCD_String(char flash *);
;void Busy(void);
;void Command(unsigned char);
;void Data(unsigned char);
;
;void main(void)
; 0000 001C {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 001D 	LCD_init();
;PCODE: $0000000E VOL: 0
; 0000 001E 
; 0000 001F 	LCD_String("Hello!! KUT-128");	// 첫번째 라인에 출력
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0020     	Command(LINE2);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0021     	LCD_String("Atmel ATmega128");	// 두번째 라인에 출력
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0022 
; 0000 0023 	while(1);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0024 }
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;
;// LCD 초기화
;void LCD_init(void)
; 0000 0028 {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0029 	DDRD = 0xFF;			// 포트 D 출력 설정
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002A 	PORTD &= 0xFB;			//E = 0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002B 
; 0000 002C 	delay_ms(15);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 002D 	Command(0x20);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 002E 	delay_ms(5);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002F 	Command(0x20);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0030 	delay_us(100);
;PCODE: $0000002D VOL: 0
; 0000 0031 	Command(0x20);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0032 	Command(FUNCSET);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0033 	Command(DISPON);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0034 	Command(ALLCLR);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0035 	Command(ENTMODE);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0036 }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;
;// 문자열 출력 함수
;void LCD_String(char flash *str)
; 0000 003A {
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003B 	char flash *pStr=0;
; 0000 003C 
; 0000 003D 	pStr = str;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;	*str -> R18,R19
;	*pStr -> R16,R17
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 003E 	while(*pStr) Data(*pStr++);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 003F }
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;
;// 인스트럭션 쓰기 함수
;void Command(unsigned char byte)
; 0000 0043 {
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0044 	Busy();
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;	byte -> R17
;PCODE: $00000056 VOL: 0
; 0000 0045 
; 0000 0046 	// 인스트럭션 상위 바이트
; 0000 0047 	PORTD = (byte & 0xF0);		// 데이터
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0048 	PORTD &= 0xFE;			//RS = 0;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0049 	PORTD &= 0xFD;			//RW = 0;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 004A 	delay_us(1);
;PCODE: $0000005E VOL: 0
; 0000 004B 	PORTD |= 0x04;			//E = 1;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 004C 	delay_us(1);
;PCODE: $00000061 VOL: 0
; 0000 004D 	PORTD &= 0xFB;			//E = 0;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 004E 
; 0000 004F 	// 인스트럭션 하위 바이트
; 0000 0050         PORTD = ((byte<<4) & 0xF0);	// 데이터
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0051 	PORTD &= 0xFE;			//RS = 0;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0052 	PORTD &= 0xFD;			//RW = 0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0053 	delay_us(1);
;PCODE: $0000006C VOL: 0
; 0000 0054 	PORTD |= 0x04;			//E = 1;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0055 	delay_us(1);
;PCODE: $0000006F VOL: 0
; 0000 0056 	PORTD &= 0xFB;			//E = 0;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0057 }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;
;//데이터 쓰기 함수
;void Data(unsigned char byte)
; 0000 005B {
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 005C 	Busy();
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;	byte -> R17
;PCODE: $00000079 VOL: 0
; 0000 005D 
; 0000 005E 	// 데이터 상위 바이트
; 0000 005F 	PORTD = (byte & 0xF0);		// 데이터
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0060 	PORTD |= 0x01;			//RS = 1;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0061 	PORTD &= 0xFD;			//RW = 0;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0062 	delay_us(1);
;PCODE: $00000081 VOL: 0
; 0000 0063 	PORTD |= 0x04;			//E = 1;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0064 	delay_us(1);
;PCODE: $00000084 VOL: 0
; 0000 0065 	PORTD &= 0xFB;			//E = 0;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0066 
; 0000 0067 	// 데이터 하위 바이트
; 0000 0068 	PORTD = ((byte<<4) & 0xF0);  	// 데이터
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0069 	PORTD |= 0x01;			//RS = 1;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 006A 	PORTD &= 0xFD;			//RW = 0;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 006B 	delay_us(1);
;PCODE: $0000008F VOL: 0
; 0000 006C 	PORTD |= 0x04;			//E = 1;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 006D 	delay_us(1);
;PCODE: $00000092 VOL: 0
; 0000 006E 	PORTD &= 0xFB;			//E = 0;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 006F }
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;
;// Busy Flag Check -> 일반적인 BF를 체크하는 것이 아니라
;// 일정한 시간 지연을 이용한다.
;void Busy(void)
; 0000 0074 {
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0075 	delay_ms(2);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0076 }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
