;// complete !!
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define FUNCSET       0x28    // Function Set
;#define ENTMODE          0x06    // Entry Mode Set
;#define ALLCLR        0x01    // All Clear
;#define DISPON        0x0c     // Display On
;#define LINE2         0xC0    // 2nd Line Move
;
;void LCD_init(void);
;void LCD_String(char flash *);
;void Busy(void);
;void Command(unsigned char);
;void Data(unsigned char);
;
;void AD_DS(int);
;void CHECK();
;void NEGLECT();
;void LCD_IDLE();
;
;float fval;
;int ival;
;unsigned int flag = 0;
;
;void main(void)
; 0000 001C {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 001D     int ad_val;
; 0000 001E     unsigned char SW;
; 0000 001F         LCD_IDLE();
;	ad_val -> R16,R17
;	SW -> R19
;PCODE: $0000000E VOL: 0
; 0000 0020         /*
; 0000 0021         주석처리한게 LCD_IDLE() 내용
; 0000 0022         LCD_init();
; 0000 0023         LCD_String(" Sensor inactive");    // 첫번째 라인에 출력
; 0000 0024         Command(LINE2);
; 0000 0025         LCD_String("   Intial Mode");    // 두번째 라인에 출력
; 0000 0026         */
; 0000 0027     DDRE = 0x0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0028     ADMUX = 0b01000000;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0029     ADCSRA = 0x87;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002A 
; 0000 002B     delay_ms(10);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002C 
; 0000 002D     while(1)
;PCODE: $00000018 VOL: 0
; 0000 002E     {
; 0000 002F 
; 0000 0030         ADCSRA = ADCSRA | 0b01000000;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0031         while((ADCSRA & 0x10) == 0);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0032             ad_val = (int)ADCL + ((int)ADCH << 8);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0033         AD_DS(ad_val);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0034 
; 0000 0035         SW = PINE & 0b00010000;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0036         if(SW == 1)
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0037         {
; 0000 0038             Command(LINE2);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0039             LCD_String("RESET");
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 003A             delay_ms(1000);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 003B             delay_ms(1000);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 003C             LCD_IDLE();
;PCODE: $00000039 VOL: 0
; 0000 003D             flag = 0;
;PCODE: $0000003A VOL: 0
; 0000 003E             delay_ms(500);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 003F         }
; 0000 0040 
; 0000 0041         // flag 0 = pe0, flag 1 = pe1 sensor
; 0000 0042         if(ival >= 100 )
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0043         {
; 0000 0044             CHECK();
;PCODE: $00000041 VOL: 0
; 0000 0045         }
; 0000 0046         else
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0047         {
; 0000 0048             NEGLECT();
;PCODE: $00000044 VOL: 0
; 0000 0049         }
;PCODE: $00000045 VOL: 0
; 0000 004A 
; 0000 004B     }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 004C }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;
;void AD_DS(int val)
; 0000 004F {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0050     fval = (float)val * 5.0 / 1023.0;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;	val -> R16,R17
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0051     ival = (int)(fval * 100.0 + 0.5);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0052 }
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;
;void CHECK()
; 0000 0055 {
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0056     if(flag == 0) // PE0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0057     {
; 0000 0058        LCD_init();
;PCODE: $00000066 VOL: 0
; 0000 0059        LCD_String("Sensor 1 CHECK");
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 005A        flag = 1;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 005B        ADMUX = 0b01000001;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 005C     }
; 0000 005D     else if(flag == 1) //PE1
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 005E     {
; 0000 005F         Command(LINE2);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0060         LCD_String("Sensor 2 CHECK");
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0061         flag = 2;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0062         ADMUX = 0b01000000;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0063     }
; 0000 0064     else
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0065         NEGLECT();
;PCODE: $0000007E VOL: 0
; 0000 0066 }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;
;void NEGLECT()
; 0000 0069 {
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 006A     delay_ms(5);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 006B }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;
;void LCD_IDLE()
; 0000 006E {
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 006F     LCD_init();
;PCODE: $0000008C VOL: 0
; 0000 0070     LCD_String(" Sensor Inactive");
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0071     Command(LINE2);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0072     LCD_String("   Intial Mode");
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0073 }
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;
;void LCD_init(void)
; 0000 0076 {
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0077     DDRD = 0xFF;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0078     PORTD &= 0xFB;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0079 
; 0000 007A     delay_ms(15);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 007B     Command(0x20);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 007C     delay_ms(5);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 007D     Command(0x20);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 007E     delay_us(100);
;PCODE: $000000A7 VOL: 0
; 0000 007F     Command(0x20);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0080     Command(FUNCSET);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0081     Command(DISPON);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0082     Command(ALLCLR);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0083     Command(ENTMODE);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0084 }
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;
;void LCD_String(char flash *str)
; 0000 0087 {
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0088     char flash *pStr=0;
; 0000 0089 
; 0000 008A     pStr = str;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;	*str -> R18,R19
;	*pStr -> R16,R17
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 008B     while(*pStr) Data(*pStr++);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 008C }
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;
;void Command(unsigned char byte)
; 0000 008F {
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0090     Busy();
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;	byte -> R17
;PCODE: $000000D0 VOL: 0
; 0000 0091 
; 0000 0092     PORTD = (byte & 0xF0);        // 데이터
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0093     PORTD &= 0xFE;            //RS = 0;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0094     PORTD &= 0xFD;            //RW = 0;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0095     delay_us(1);
;PCODE: $000000D8 VOL: 0
; 0000 0096     PORTD |= 0x04;            //E = 1;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0097     delay_us(1);
;PCODE: $000000DB VOL: 0
; 0000 0098     PORTD &= 0xFB;            //E = 0;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0099 
; 0000 009A     PORTD = ((byte<<4) & 0xF0);    // 데이터
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 009B     PORTD &= 0xFE;            //RS = 0;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 009C     PORTD &= 0xFD;            //RW = 0;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 009D     delay_us(1);
;PCODE: $000000E6 VOL: 0
; 0000 009E     PORTD |= 0x04;            //E = 1;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 009F     delay_us(1);
;PCODE: $000000E9 VOL: 0
; 0000 00A0     PORTD &= 0xFB;            //E = 0;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00A1 }
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;
;void Data(unsigned char byte)
; 0000 00A4 {
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00A5     Busy();
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;	byte -> R17
;PCODE: $000000F3 VOL: 0
; 0000 00A6 
; 0000 00A7     PORTD = (byte & 0xF0);        // 데이터
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00A8     PORTD |= 0x01;            //RS = 1;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00A9     PORTD &= 0xFD;            //RW = 0;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00AA     delay_us(1);
;PCODE: $000000FB VOL: 0
; 0000 00AB     PORTD |= 0x04;            //E = 1;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00AC     delay_us(1);
;PCODE: $000000FE VOL: 0
; 0000 00AD     PORTD &= 0xFB;            //E = 0;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00AE 
; 0000 00AF     PORTD = ((byte<<4) & 0xF0);      // 데이터
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00B0     PORTD |= 0x01;            //RS = 1;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00B1     PORTD &= 0xFD;            //RW = 0;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00B2     delay_us(1);
;PCODE: $00000109 VOL: 0
; 0000 00B3     PORTD |= 0x04;            //E = 1;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00B4     delay_us(1);
;PCODE: $0000010C VOL: 0
; 0000 00B5     PORTD &= 0xFB;            //E = 0;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00B6 }
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;
;void Busy(void)
; 0000 00B9 {
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00BA     delay_ms(2);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00BB }
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
