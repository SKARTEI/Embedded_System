;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define FUNCSET       0x28    // Function Set
;#define ENTMODE          0x06    // Entry Mode Set
;#define ALLCLR        0x01    // All Clear
;#define DISPON        0x0c     // Display On
;#define LINE2         0xC0    // 2nd Line Move
;
;void LCD_init(void);
;void LCD_String(char flash *);
;void Busy(void);
;void Command(unsigned char);
;void Data(unsigned char);
;
;void LCD_IDLE();
;
;unsigned char R_num = 1, S_num;
;
;void main(void)
; 0000 0015 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0016     //unsigned char O_SW, N_SW;
; 0000 0017     LCD_IDLE();
;PCODE: $0000000E VOL: 0
; 0000 0018 
; 0000 0019     //DDRE = 0x0;
; 0000 001A 
; 0000 001B     UCSR0A = 0x0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 001C     UCSR0B = 0b10011000;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001D     UCSR0C = 0b00000110;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 001E     UBRR0H = 0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 001F     UBRR0L = 103;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0020 
; 0000 0021     SREG = 0x80;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0022 
; 0000 0023     while(1);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0024   /*
; 0000 0025    O_SW = PINE & 0b10000000;
; 0000 0026     while(1)
; 0000 0027     {
; 0000 0028         N_SW = PINE & 0b10000000;
; 0000 0029         if((O_SW != 0) && (N_SW == 0))
; 0000 002A         {
; 0000 002B             Command(LINE2);
; 0000 002C             LCD_String("CLEAR   LCD");
; 0000 002D             delay_ms(1000);
; 0000 002E             delay_ms(1000);
; 0000 002F             LCD_IDLE();
; 0000 0030         }
; 0000 0031 
; 0000 0032       O_SW = N_SW;
; 0000 0033     }  */
; 0000 0034 }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;void LCD_IDLE()
; 0000 0037 {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0038     LCD_init();
;PCODE: $00000023 VOL: 0
; 0000 0039     LCD_String("BLUETOOTH ON");
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 003A }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;
;interrupt [USART0_RXC] void USART_recieve (void)
; 0000 003D {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003E     R_num = UDR0;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003F     S_num = R_num;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0040 
; 0000 0041     //if(R_num == '1')
; 0000 0042     if(R_num == '1')
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0043     {
; 0000 0044         Command(LINE2);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0045     	LCD_String("NUMBER 1 RECIEVED");
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0046         delay_ms(1000);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0047         LCD_IDLE();
;PCODE: $00000039 VOL: 0
; 0000 0048     }
; 0000 0049     else if(R_num == '2')
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004A     {
; 0000 004B         Command(LINE2);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 004C         LCD_String("NUMBER 2 RECIEVED");
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 004D         delay_ms(1000);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 004E         LCD_IDLE();
;PCODE: $00000046 VOL: 0
; 0000 004F     }
; 0000 0050     else
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0051     {
; 0000 0052         Command(LINE2);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0053         LCD_String("ERROR DETECTED");
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0054         delay_ms(1000);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0055         LCD_IDLE();
;PCODE: $00000050 VOL: 0
; 0000 0056     }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0057     UDR0 = S_num;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0058 }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;
;
;//    ************   LCD code    ******************
;void LCD_init(void)
; 0000 005D {
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 005E     DDRD = 0xFF;            // 포트 D 출력 설정
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 005F     PORTD &= 0xFB;            //E = 0;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0060 
; 0000 0061     delay_ms(15);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0062     Command(0x20);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0063     delay_ms(5);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0064     Command(0x20);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0065     delay_us(100);
;PCODE: $00000068 VOL: 0
; 0000 0066     Command(0x20);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0067     Command(FUNCSET);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0068     Command(DISPON);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0069     Command(ALLCLR);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 006A     Command(ENTMODE);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 006B }
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;
;
;void LCD_String(char flash *str)
; 0000 006F {
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0070     char flash *pStr=0;
; 0000 0071 
; 0000 0072     pStr = str;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;	*str -> R18,R19
;	*pStr -> R16,R17
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0073     while(*pStr) Data(*pStr++);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0074 }
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;
;
;void Command(unsigned char byte)
; 0000 0078 {
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0079     Busy();
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;	byte -> R17
;PCODE: $00000091 VOL: 0
; 0000 007A 
; 0000 007B     // 인스트럭션 상위 바이트
; 0000 007C     PORTD = (byte & 0xF0);        // 데이터
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 007D     PORTD &= 0xFE;            //RS = 0;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 007E     PORTD &= 0xFD;            //RW = 0;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 007F     delay_us(1);
;PCODE: $00000099 VOL: 0
; 0000 0080     PORTD |= 0x04;            //E = 1;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0081     delay_us(1);
;PCODE: $0000009C VOL: 0
; 0000 0082     PORTD &= 0xFB;            //E = 0;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0083 
; 0000 0084     // 인스트럭션 하위 바이트
; 0000 0085         PORTD = ((byte<<4) & 0xF0);    // 데이터
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0086     PORTD &= 0xFE;            //RS = 0;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0087     PORTD &= 0xFD;            //RW = 0;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0088     delay_us(1);
;PCODE: $000000A7 VOL: 0
; 0000 0089     PORTD |= 0x04;            //E = 1;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 008A     delay_us(1);
;PCODE: $000000AA VOL: 0
; 0000 008B     PORTD &= 0xFB;            //E = 0;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 008C }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;
;
;void Data(unsigned char byte)
; 0000 0090 {
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0091     Busy();
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;	byte -> R17
;PCODE: $000000B4 VOL: 0
; 0000 0092 
; 0000 0093     // 데이터 상위 바이트
; 0000 0094     PORTD = (byte & 0xF0);        // 데이터
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0095     PORTD |= 0x01;            //RS = 1;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0096     PORTD &= 0xFD;            //RW = 0;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0097     delay_us(1);
;PCODE: $000000BC VOL: 0
; 0000 0098     PORTD |= 0x04;            //E = 1;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0099     delay_us(1);
;PCODE: $000000BF VOL: 0
; 0000 009A     PORTD &= 0xFB;            //E = 0;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 009B 
; 0000 009C     // 데이터 하위 바이트
; 0000 009D     PORTD = ((byte<<4) & 0xF0);      // 데이터
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 009E     PORTD |= 0x01;            //RS = 1;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 009F     PORTD &= 0xFD;            //RW = 0;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00A0     delay_us(1);
;PCODE: $000000CA VOL: 0
; 0000 00A1     PORTD |= 0x04;            //E = 1;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00A2     delay_us(1);
;PCODE: $000000CD VOL: 0
; 0000 00A3     PORTD &= 0xFB;            //E = 0;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00A4 }
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;
;
;void Busy(void)
; 0000 00A8 {
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00A9     delay_ms(2);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00AA }
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
