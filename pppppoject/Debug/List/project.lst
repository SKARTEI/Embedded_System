
AVRASM ver. 2.1.30  C:\a_semester3_1\pppppoject\Debug\List\project.asm Mon Apr 19 12:34:08 2021

C:\a_semester3_1\pppppoject\Debug\List\project.asm(1097): warning: Register r4 already defined by the .DEF directive
C:\a_semester3_1\pppppoject\Debug\List\project.asm(1098): warning: Register r5 already defined by the .DEF directive
C:\a_semester3_1\pppppoject\Debug\List\project.asm(1099): warning: Register r6 already defined by the .DEF directive
C:\a_semester3_1\pppppoject\Debug\List\project.asm(1100): warning: Register r7 already defined by the .DEF directive
C:\a_semester3_1\pppppoject\Debug\List\project.asm(1101): warning: Register r8 already defined by the .DEF directive
C:\a_semester3_1\pppppoject\Debug\List\project.asm(1102): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.28 Evaluation
                 ;(C) Copyright 1998-2016 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _ival=R4
                 	.DEF _ival_msb=R5
                 	.DEF _second=R6
                 	.DEF _second_msb=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000046 0000      	.DB  0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
000047 0002      	.DW  0x02
000048 0006      	.DW  0x06
000049 008c      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00004a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004b 94f8      	CLI
00004c 27ee      	CLR  R30
00004d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004e e0f1      	LDI  R31,1
00004f bff5      	OUT  MCUCR,R31
000050 bfe5      	OUT  MCUCR,R30
000051 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000053 e08d      	LDI  R24,(14-2)+1
000054 e0a2      	LDI  R26,2
000055 27bb      	CLR  R27
                 __CLEAR_REG:
000056 93ed      	ST   X+,R30
000057 958a      	DEC  R24
000058 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000059 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005a e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005b e0a0      	LDI  R26,LOW(__SRAM_START)
00005c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00005d 93ed      	ST   X+,R30
00005e 9701      	SBIW R24,1
00005f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000060 e8ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000061 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000062 9185      	LPM  R24,Z+
000063 9195      	LPM  R25,Z+
000064 9700      	SBIW R24,0
000065 f061      	BREQ __GLOBAL_INI_END
000066 91a5      	LPM  R26,Z+
000067 91b5      	LPM  R27,Z+
000068 9005      	LPM  R0,Z+
000069 9015      	LPM  R1,Z+
00006a 01bf      	MOVW R22,R30
00006b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006c 9005      	LPM  R0,Z+
00006d 920d      	ST   X+,R0
00006e 9701      	SBIW R24,1
00006f f7e1      	BRNE __GLOBAL_INI_LOOP
000070 01fb      	MOVW R30,R22
000071 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000072 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000073 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000074 bfed      	OUT  SPL,R30
000075 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000076 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000077 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000078 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000079 940c 007b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;void AD_DS(int);
                 ;void CHECK1();
                 ;void CHECK2();
                 ;void NEGLECT1();
                 ;void NEGLECT2();
                 ;
                 ;float fval;
                 ;int ival, second = 0, i;
                 ;
                 ;void main(void)
                 ; 0000 000E {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000F     int ad_val;
                 ; 0000 0010 
                 ; 0000 0011     DDRC = 0xFF;
                 ;	ad_val -> R16,R17
00007b efef      	LDI  R30,LOW(255)
00007c bbe4      	OUT  0x14,R30
                 ; 0000 0012     PORTC = 0b00000000;
00007d e0e0      	LDI  R30,LOW(0)
00007e bbe5      	OUT  0x15,R30
                 ; 0000 0013 
                 ; 0000 0014     ADMUX = 0b01000000;
00007f e4e0      	LDI  R30,LOW(64)
000080 b9e7      	OUT  0x7,R30
                 ; 0000 0015     ADCSRA = 0x87;
000081 e8e7      	LDI  R30,LOW(135)
000082 b9e6      	OUT  0x6,R30
                 ; 0000 0016 
                 ; 0000 0017     SREG = 0X80;
000083 e8e0      	LDI  R30,LOW(128)
000084 bfef      	OUT  0x3F,R30
                 ; 0000 0018 
                 ; 0000 0019     delay_ms(10);
000085 e0aa      	LDI  R26,LOW(10)
000086 e0b0      	LDI  R27,0
000087 d20c      	RCALL _delay_ms
                 ; 0000 001A 
                 ; 0000 001B     while(1)
                 _0x3:
                 ; 0000 001C     {
                 ; 0000 001D         ADCSRA = 0xC7;
000088 ece7      	LDI  R30,LOW(199)
000089 b9e6      	OUT  0x6,R30
                 ; 0000 001E         while((ADCSRA & 0x10) == 0);
                 _0x6:
00008a 9b34      	SBIS 0x6,4
00008b cffe      	RJMP _0x6
                 ; 0000 001F             ad_val = (int)ADCL + ((int)ADCH << 8);
00008c b1e4      	IN   R30,0x4
00008d e0f0      	LDI  R31,0
00008e 01df      	MOVW R26,R30
00008f b1e5      	IN   R30,0x5
000090 2ffe      	MOV  R31,R30
000091 e0e0      	LDI  R30,0
000092 0fea      	ADD  R30,R26
000093 1ffb      	ADC  R31,R27
000094 018f      	MOVW R16,R30
                 ; 0000 0020         AD_DS(ad_val);
000095 01d8      	MOVW R26,R16
000096 d014      	RCALL _AD_DS
                 ; 0000 0021        /*
                 ; 0000 0022         if(ival >= 100  && second == 0)
                 ; 0000 0023             CHECK1();
                 ; 0000 0024         else if(ival < 100  && second == 0)
                 ; 0000 0025             NEGLECT1();
                 ; 0000 0026         else if(ival >= 100  && second == 1)
                 ; 0000 0027             CHECK2();
                 ; 0000 0028         else if(ival < 100  && second == 1)
                 ; 0000 0029             NEGLECT2();
                 ; 0000 002A         */
                 ; 0000 002B         if(ival >= 100)
000097 e6e4      	LDI  R30,LOW(100)
000098 e0f0      	LDI  R31,HIGH(100)
000099 164e      	CP   R4,R30
00009a 065f      	CPC  R5,R31
00009b f03c      	BRLT _0x9
                 ; 0000 002C         {
                 ; 0000 002D             if (ADMUX == 0b01000000)
00009c b1e7      	IN   R30,0x7
00009d 34e0      	CPI  R30,LOW(0x40)
00009e f411      	BRNE _0xA
                 ; 0000 002E                 CHECK1();
00009f d03c      	RCALL _CHECK1
                 ; 0000 002F             else
0000a0 c001      	RJMP _0xB
                 _0xA:
                 ; 0000 0030                 CHECK2();
0000a1 d04d      	RCALL _CHECK2
                 ; 0000 0031         }
                 _0xB:
                 ; 0000 0032 
                 ; 0000 0033         else
0000a2 c006      	RJMP _0xC
                 _0x9:
                 ; 0000 0034         {
                 ; 0000 0035             if (ADMUX == 0b01000000)
0000a3 b1e7      	IN   R30,0x7
0000a4 34e0      	CPI  R30,LOW(0x40)
0000a5 f411      	BRNE _0xD
                 ; 0000 0036                 NEGLECT1();
0000a6 d058      	RCALL _NEGLECT1
                 ; 0000 0037             else
0000a7 c001      	RJMP _0xE
                 _0xD:
                 ; 0000 0038                 NEGLECT2();
0000a8 d058      	RCALL _NEGLECT2
                 ; 0000 0039         }
                 _0xE:
                 _0xC:
                 ; 0000 003A 
                 ; 0000 003B     }
0000a9 cfde      	RJMP _0x3
                 ; 0000 003C }
                 _0xF:
0000aa cfff      	RJMP _0xF
                 ; .FEND
                 ;
                 ;void AD_DS(int val)
                 ; 0000 003F {
                 _AD_DS:
                 ; .FSTART _AD_DS
                 ; 0000 0040     fval = (float)val * 5.0 / 1023.0;
0000ab 931a      	ST   -Y,R17
0000ac 930a      	ST   -Y,R16
0000ad 018d      	MOVW R16,R26
                 ;	val -> R16,R17
0000ae 01f8      	MOVW R30,R16
0000af d065      	RCALL __CWD1
0000b0 d0cf      	RCALL __CDF1
                +
0000b1 e0a0     +LDI R26 , LOW ( 0x40A00000 )
0000b2 e0b0     +LDI R27 , HIGH ( 0x40A00000 )
0000b3 ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
0000b4 e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
0000b5 d14c      	RCALL __MULF12
0000b6 01df      	MOVW R26,R30
0000b7 01cb      	MOVW R24,R22
                +
0000b8 e0e0     +LDI R30 , LOW ( 0x447FC000 )
0000b9 ecf0     +LDI R31 , HIGH ( 0x447FC000 )
0000ba e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
0000bb e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
0000bc d193      	RCALL __DIVF21
0000bd 93e0 0500 	STS  _fval,R30
0000bf 93f0 0501 	STS  _fval+1,R31
0000c1 9360 0502 	STS  _fval+2,R22
0000c3 9370 0503 	STS  _fval+3,R23
                 ; 0000 0041     ival = (int)(fval * 100.0 + 0.5);
0000c5 91a0 0500 	LDS  R26,_fval
0000c7 91b0 0501 	LDS  R27,_fval+1
0000c9 9180 0502 	LDS  R24,_fval+2
0000cb 9190 0503 	LDS  R25,_fval+3
                +
0000cd e0e0     +LDI R30 , LOW ( 0x42C80000 )
0000ce e0f0     +LDI R31 , HIGH ( 0x42C80000 )
0000cf ec68     +LDI R22 , BYTE3 ( 0x42C80000 )
0000d0 e472     +LDI R23 , BYTE4 ( 0x42C80000 )
                 	__GETD1N 0x42C80000
0000d1 d130      	RCALL __MULF12
                +
0000d2 e0a0     +LDI R26 , LOW ( 0x3F000000 )
0000d3 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
0000d4 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
0000d5 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
0000d6 d0dc      	RCALL __ADDF12
0000d7 d071      	RCALL __CFD1
0000d8 012f      	MOVW R4,R30
                 ; 0000 0042 }
0000d9 9109      	LD   R16,Y+
0000da 9119      	LD   R17,Y+
0000db 9508      	RET
                 ; .FEND
                 ;void CHECK1()
                 ; 0000 0044 {
                 _CHECK1:
                 ; .FSTART _CHECK1
                 ; 0000 0045 
                 ; 0000 0046     PORTC = 0b10000000;   //b
0000dc e8e0      	LDI  R30,LOW(128)
0000dd bbe5      	OUT  0x15,R30
                 ; 0000 0047     second = 1;
0000de e0e1      	LDI  R30,LOW(1)
0000df e0f0      	LDI  R31,HIGH(1)
0000e0 013f      	MOVW R6,R30
                 ; 0000 0048     for (i = 0; i < 3; i++)
0000e1 2488      	CLR  R8
0000e2 2499      	CLR  R9
                 _0x11:
0000e3 d024      	RCALL SUBOPT_0x0
0000e4 f43c      	BRGE _0x12
                 ; 0000 0049         delay_ms(1000);
0000e5 eea8      	LDI  R26,LOW(1000)
0000e6 e0b3      	LDI  R27,HIGH(1000)
0000e7 d1ac      	RCALL _delay_ms
0000e8 01f4      	MOVW R30,R8
0000e9 9631      	ADIW R30,1
0000ea 014f      	MOVW R8,R30
0000eb cff7      	RJMP _0x11
                 _0x12:
                 ; 0000 004A ADMUX = 0b01000011;
0000ec e4e3      	LDI  R30,LOW(67)
0000ed b9e7      	OUT  0x7,R30
                 ; 0000 004B 
                 ; 0000 004C }
0000ee 9508      	RET
                 ; .FEND
                 ;
                 ;void CHECK2()
                 ; 0000 004F {
                 _CHECK2:
                 ; .FSTART _CHECK2
                 ; 0000 0050     PORTC = 0b01000000;    //g
0000ef e4e0      	LDI  R30,LOW(64)
0000f0 bbe5      	OUT  0x15,R30
                 ; 0000 0051     second = 0;
0000f1 2466      	CLR  R6
0000f2 2477      	CLR  R7
                 ; 0000 0052     for (i = 0; i < 3; i++)
0000f3 2488      	CLR  R8
0000f4 2499      	CLR  R9
                 _0x14:
0000f5 d012      	RCALL SUBOPT_0x0
0000f6 f43c      	BRGE _0x15
                 ; 0000 0053         delay_ms(1000);
0000f7 eea8      	LDI  R26,LOW(1000)
0000f8 e0b3      	LDI  R27,HIGH(1000)
0000f9 d19a      	RCALL _delay_ms
0000fa 01f4      	MOVW R30,R8
0000fb 9631      	ADIW R30,1
0000fc 014f      	MOVW R8,R30
0000fd cff7      	RJMP _0x14
                 _0x15:
                 ; 0000 0055 }
0000fe 9508      	RET
                 ; .FEND
                 ;
                 ;void NEGLECT1()
                 ; 0000 0058 {
                 _NEGLECT1:
                 ; .FSTART _NEGLECT1
                 ; 0000 0059     PORTC = 0b00000000;    // x
0000ff e0e0      	LDI  R30,LOW(0)
000100 c001      	RJMP _0x2000001
                 ; 0000 005A     delay_ms(5);
                 ; 0000 005B     second = second;
                 ; 0000 005C }
                 ; .FEND
                 ;
                 ;void NEGLECT2()
                 ; 0000 005F {
                 _NEGLECT2:
                 ; .FSTART _NEGLECT2
                 ; 0000 0060     PORTC = 0b00100000;    //r
000101 e2e0      	LDI  R30,LOW(32)
                 _0x2000001:
000102 bbe5      	OUT  0x15,R30
                 ; 0000 0061     delay_ms(5);
000103 e0a5      	LDI  R26,LOW(5)
000104 e0b0      	LDI  R27,0
000105 d18e      	RCALL _delay_ms
                 ; 0000 0062     second = second;
000106 0133      	MOVW R6,R6
                 ; 0000 0063 }
000107 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _fval:
000500           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000108 e0e3      	LDI  R30,LOW(3)
000109 e0f0      	LDI  R31,HIGH(3)
00010a 168e      	CP   R8,R30
00010b 069f      	CPC  R9,R31
00010c 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __ANEGD1:
00010d 95f0      	COM  R31
00010e 9560      	COM  R22
00010f 9570      	COM  R23
000110 95e1      	NEG  R30
000111 4fff      	SBCI R31,-1
000112 4f6f      	SBCI R22,-1
000113 4f7f      	SBCI R23,-1
000114 9508      	RET
                 
                 __CWD1:
000115 2f6f      	MOV  R22,R31
000116 0f66      	ADD  R22,R22
000117 0b66      	SBC  R22,R22
000118 2f76      	MOV  R23,R22
000119 9508      	RET
                 
                 __ROUND_REPACK:
00011a 2355      	TST  R21
00011b f442      	BRPL __REPACK
00011c 3850      	CPI  R21,0x80
00011d f411      	BRNE __ROUND_REPACK0
00011e ffe0      	SBRS R30,0
00011f c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000120 9631      	ADIW R30,1
000121 1f69      	ADC  R22,R25
000122 1f79      	ADC  R23,R25
000123 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000124 e850      	LDI  R21,0x80
000125 2757      	EOR  R21,R23
000126 f411      	BRNE __REPACK0
000127 935f      	PUSH R21
000128 c0c8      	RJMP __ZERORES
                 __REPACK0:
000129 3f5f      	CPI  R21,0xFF
00012a f031      	BREQ __REPACK1
00012b 0f66      	LSL  R22
00012c 0c00      	LSL  R0
00012d 9557      	ROR  R21
00012e 9567      	ROR  R22
00012f 2f75      	MOV  R23,R21
000130 9508      	RET
                 __REPACK1:
000131 935f      	PUSH R21
000132 2000      	TST  R0
000133 f00a      	BRMI __REPACK2
000134 c0c7      	RJMP __MAXRES
                 __REPACK2:
000135 c0c0      	RJMP __MINRES
                 
                 __UNPACK:
000136 e850      	LDI  R21,0x80
000137 2e19      	MOV  R1,R25
000138 2215      	AND  R1,R21
000139 0f88      	LSL  R24
00013a 1f99      	ROL  R25
00013b 2795      	EOR  R25,R21
00013c 0f55      	LSL  R21
00013d 9587      	ROR  R24
                 
                 __UNPACK1:
00013e e850      	LDI  R21,0x80
00013f 2e07      	MOV  R0,R23
000140 2205      	AND  R0,R21
000141 0f66      	LSL  R22
000142 1f77      	ROL  R23
000143 2775      	EOR  R23,R21
000144 0f55      	LSL  R21
000145 9567      	ROR  R22
000146 9508      	RET
                 
                 __CFD1U:
000147 9468      	SET
000148 c001      	RJMP __CFD1U0
                 __CFD1:
000149 94e8      	CLT
                 __CFD1U0:
00014a 935f      	PUSH R21
00014b dff2      	RCALL __UNPACK1
00014c 3870      	CPI  R23,0x80
00014d f018      	BRLO __CFD10
00014e 3f7f      	CPI  R23,0xFF
00014f f408      	BRCC __CFD10
000150 c0a0      	RJMP __ZERORES
                 __CFD10:
000151 e156      	LDI  R21,22
000152 1b57      	SUB  R21,R23
000153 f4aa      	BRPL __CFD11
000154 9551      	NEG  R21
000155 3058      	CPI  R21,8
000156 f40e      	BRTC __CFD19
000157 3059      	CPI  R21,9
                 __CFD19:
000158 f030      	BRLO __CFD17
000159 efef      	SER  R30
00015a efff      	SER  R31
00015b ef6f      	SER  R22
00015c e77f      	LDI  R23,0x7F
00015d f977      	BLD  R23,7
00015e c01a      	RJMP __CFD15
                 __CFD17:
00015f 2777      	CLR  R23
000160 2355      	TST  R21
000161 f0b9      	BREQ __CFD15
                 __CFD18:
000162 0fee      	LSL  R30
000163 1fff      	ROL  R31
000164 1f66      	ROL  R22
000165 1f77      	ROL  R23
000166 955a      	DEC  R21
000167 f7d1      	BRNE __CFD18
000168 c010      	RJMP __CFD15
                 __CFD11:
000169 2777      	CLR  R23
                 __CFD12:
00016a 3058      	CPI  R21,8
00016b f028      	BRLO __CFD13
00016c 2fef      	MOV  R30,R31
00016d 2ff6      	MOV  R31,R22
00016e 2f67      	MOV  R22,R23
00016f 5058      	SUBI R21,8
000170 cff9      	RJMP __CFD12
                 __CFD13:
000171 2355      	TST  R21
000172 f031      	BREQ __CFD15
                 __CFD14:
000173 9576      	LSR  R23
000174 9567      	ROR  R22
000175 95f7      	ROR  R31
000176 95e7      	ROR  R30
000177 955a      	DEC  R21
000178 f7d1      	BRNE __CFD14
                 __CFD15:
000179 2000      	TST  R0
00017a f40a      	BRPL __CFD16
00017b df91      	RCALL __ANEGD1
                 __CFD16:
00017c 915f      	POP  R21
00017d 9508      	RET
                 
                 __CDF1U:
00017e 9468      	SET
00017f c001      	RJMP __CDF1U0
                 __CDF1:
000180 94e8      	CLT
                 __CDF1U0:
000181 9730      	SBIW R30,0
000182 4060      	SBCI R22,0
000183 4070      	SBCI R23,0
000184 f0b1      	BREQ __CDF10
000185 2400      	CLR  R0
000186 f026      	BRTS __CDF11
000187 2377      	TST  R23
000188 f412      	BRPL __CDF11
000189 9400      	COM  R0
00018a df82      	RCALL __ANEGD1
                 __CDF11:
00018b 2e17      	MOV  R1,R23
00018c e17e      	LDI  R23,30
00018d 2011      	TST  R1
                 __CDF12:
00018e f032      	BRMI __CDF13
00018f 957a      	DEC  R23
000190 0fee      	LSL  R30
000191 1fff      	ROL  R31
000192 1f66      	ROL  R22
000193 1c11      	ROL  R1
000194 cff9      	RJMP __CDF12
                 __CDF13:
000195 2fef      	MOV  R30,R31
000196 2ff6      	MOV  R31,R22
000197 2d61      	MOV  R22,R1
000198 935f      	PUSH R21
000199 df8a      	RCALL __REPACK
00019a 915f      	POP  R21
                 __CDF10:
00019b 9508      	RET
                 
                 __SWAPACC:
00019c 934f      	PUSH R20
00019d 01af      	MOVW R20,R30
00019e 01fd      	MOVW R30,R26
00019f 01da      	MOVW R26,R20
0001a0 01ab      	MOVW R20,R22
0001a1 01bc      	MOVW R22,R24
0001a2 01ca      	MOVW R24,R20
0001a3 2d40      	MOV  R20,R0
0001a4 2c01      	MOV  R0,R1
0001a5 2e14      	MOV  R1,R20
0001a6 914f      	POP  R20
0001a7 9508      	RET
                 
                 __UADD12:
0001a8 0fea      	ADD  R30,R26
0001a9 1ffb      	ADC  R31,R27
0001aa 1f68      	ADC  R22,R24
0001ab 9508      	RET
                 
                 __NEGMAN1:
0001ac 95e0      	COM  R30
0001ad 95f0      	COM  R31
0001ae 9560      	COM  R22
0001af 5fef      	SUBI R30,-1
0001b0 4fff      	SBCI R31,-1
0001b1 4f6f      	SBCI R22,-1
0001b2 9508      	RET
                 
                 __ADDF12:
0001b3 935f      	PUSH R21
0001b4 df81      	RCALL __UNPACK
0001b5 3890      	CPI  R25,0x80
0001b6 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0001b7 3870      	CPI  R23,0x80
0001b8 f121      	BREQ __ADDF128
                 __ADDF121:
0001b9 2f57      	MOV  R21,R23
0001ba 1b59      	SUB  R21,R25
0001bb f12b      	BRVS __ADDF1211
0001bc f412      	BRPL __ADDF122
0001bd dfde      	RCALL __SWAPACC
0001be cffa      	RJMP __ADDF121
                 __ADDF122:
0001bf 3158      	CPI  R21,24
0001c0 f018      	BRLO __ADDF123
0001c1 27aa      	CLR  R26
0001c2 27bb      	CLR  R27
0001c3 2788      	CLR  R24
                 __ADDF123:
0001c4 3058      	CPI  R21,8
0001c5 f028      	BRLO __ADDF124
0001c6 2fab      	MOV  R26,R27
0001c7 2fb8      	MOV  R27,R24
0001c8 2788      	CLR  R24
0001c9 5058      	SUBI R21,8
0001ca cff9      	RJMP __ADDF123
                 __ADDF124:
0001cb 2355      	TST  R21
0001cc f029      	BREQ __ADDF126
                 __ADDF125:
0001cd 9586      	LSR  R24
0001ce 95b7      	ROR  R27
0001cf 95a7      	ROR  R26
0001d0 955a      	DEC  R21
0001d1 f7d9      	BRNE __ADDF125
                 __ADDF126:
0001d2 2d50      	MOV  R21,R0
0001d3 2551      	EOR  R21,R1
0001d4 f072      	BRMI __ADDF127
0001d5 dfd2      	RCALL __UADD12
0001d6 f438      	BRCC __ADDF129
0001d7 9567      	ROR  R22
0001d8 95f7      	ROR  R31
0001d9 95e7      	ROR  R30
0001da 9573      	INC  R23
0001db f413      	BRVC __ADDF129
0001dc c01f      	RJMP __MAXRES
                 __ADDF128:
0001dd dfbe      	RCALL __SWAPACC
                 __ADDF129:
0001de df45      	RCALL __REPACK
0001df 915f      	POP  R21
0001e0 9508      	RET
                 __ADDF1211:
0001e1 f7d8      	BRCC __ADDF128
0001e2 cffb      	RJMP __ADDF129
                 __ADDF127:
0001e3 1bea      	SUB  R30,R26
0001e4 0bfb      	SBC  R31,R27
0001e5 0b68      	SBC  R22,R24
0001e6 f051      	BREQ __ZERORES
0001e7 f410      	BRCC __ADDF1210
0001e8 9400      	COM  R0
0001e9 dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
0001ea 2366      	TST  R22
0001eb f392      	BRMI __ADDF129
0001ec 0fee      	LSL  R30
0001ed 1fff      	ROL  R31
0001ee 1f66      	ROL  R22
0001ef 957a      	DEC  R23
0001f0 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0001f1 27ee      	CLR  R30
0001f2 27ff      	CLR  R31
0001f3 01bf      	MOVW R22,R30
0001f4 915f      	POP  R21
0001f5 9508      	RET
                 
                 __MINRES:
0001f6 efef      	SER  R30
0001f7 efff      	SER  R31
0001f8 e76f      	LDI  R22,0x7F
0001f9 ef7f      	SER  R23
0001fa 915f      	POP  R21
0001fb 9508      	RET
                 
                 __MAXRES:
0001fc efef      	SER  R30
0001fd efff      	SER  R31
0001fe e76f      	LDI  R22,0x7F
0001ff e77f      	LDI  R23,0x7F
000200 915f      	POP  R21
000201 9508      	RET
                 
                 __MULF12:
000202 935f      	PUSH R21
000203 df32      	RCALL __UNPACK
000204 3870      	CPI  R23,0x80
000205 f359      	BREQ __ZERORES
000206 3890      	CPI  R25,0x80
000207 f349      	BREQ __ZERORES
000208 2401      	EOR  R0,R1
000209 9408      	SEC
00020a 1f79      	ADC  R23,R25
00020b f423      	BRVC __MULF124
00020c f324      	BRLT __ZERORES
                 __MULF125:
00020d 2000      	TST  R0
00020e f33a      	BRMI __MINRES
00020f cfec      	RJMP __MAXRES
                 __MULF124:
000210 920f      	PUSH R0
000211 931f      	PUSH R17
000212 932f      	PUSH R18
000213 933f      	PUSH R19
000214 934f      	PUSH R20
000215 2711      	CLR  R17
000216 2722      	CLR  R18
000217 2799      	CLR  R25
000218 9f68      	MUL  R22,R24
000219 01a0      	MOVW R20,R0
00021a 9f8f      	MUL  R24,R31
00021b 2d30      	MOV  R19,R0
00021c 0d41      	ADD  R20,R1
00021d 1f59      	ADC  R21,R25
00021e 9f6b      	MUL  R22,R27
00021f 0d30      	ADD  R19,R0
000220 1d41      	ADC  R20,R1
000221 1f59      	ADC  R21,R25
000222 9f8e      	MUL  R24,R30
000223 d027      	RCALL __MULF126
000224 9fbf      	MUL  R27,R31
000225 d025      	RCALL __MULF126
000226 9f6a      	MUL  R22,R26
000227 d023      	RCALL __MULF126
000228 9fbe      	MUL  R27,R30
000229 d01d      	RCALL __MULF127
00022a 9faf      	MUL  R26,R31
00022b d01b      	RCALL __MULF127
00022c 9fae      	MUL  R26,R30
00022d 0d11      	ADD  R17,R1
00022e 1f29      	ADC  R18,R25
00022f 1f39      	ADC  R19,R25
000230 1f49      	ADC  R20,R25
000231 1f59      	ADC  R21,R25
000232 2fe3      	MOV  R30,R19
000233 2ff4      	MOV  R31,R20
000234 2f65      	MOV  R22,R21
000235 2f52      	MOV  R21,R18
000236 914f      	POP  R20
000237 913f      	POP  R19
000238 912f      	POP  R18
000239 911f      	POP  R17
00023a 900f      	POP  R0
00023b 2366      	TST  R22
00023c f02a      	BRMI __MULF122
00023d 0f55      	LSL  R21
00023e 1fee      	ROL  R30
00023f 1fff      	ROL  R31
000240 1f66      	ROL  R22
000241 c002      	RJMP __MULF123
                 __MULF122:
000242 9573      	INC  R23
000243 f24b      	BRVS __MULF125
                 __MULF123:
000244 ded5      	RCALL __ROUND_REPACK
000245 915f      	POP  R21
000246 9508      	RET
                 
                 __MULF127:
000247 0d10      	ADD  R17,R0
000248 1d21      	ADC  R18,R1
000249 1f39      	ADC  R19,R25
00024a c002      	RJMP __MULF128
                 __MULF126:
00024b 0d20      	ADD  R18,R0
00024c 1d31      	ADC  R19,R1
                 __MULF128:
00024d 1f49      	ADC  R20,R25
00024e 1f59      	ADC  R21,R25
00024f 9508      	RET
                 
                 __DIVF21:
000250 935f      	PUSH R21
000251 dee4      	RCALL __UNPACK
000252 3870      	CPI  R23,0x80
000253 f421      	BRNE __DIVF210
000254 2011      	TST  R1
                 __DIVF211:
000255 f40a      	BRPL __DIVF219
000256 cf9f      	RJMP __MINRES
                 __DIVF219:
000257 cfa4      	RJMP __MAXRES
                 __DIVF210:
000258 3890      	CPI  R25,0x80
000259 f409      	BRNE __DIVF218
                 __DIVF217:
00025a cf96      	RJMP __ZERORES
                 __DIVF218:
00025b 2401      	EOR  R0,R1
00025c 9408      	SEC
00025d 0b97      	SBC  R25,R23
00025e f41b      	BRVC __DIVF216
00025f f3d4      	BRLT __DIVF217
000260 2000      	TST  R0
000261 cff3      	RJMP __DIVF211
                 __DIVF216:
000262 2f79      	MOV  R23,R25
000263 931f      	PUSH R17
000264 932f      	PUSH R18
000265 933f      	PUSH R19
000266 934f      	PUSH R20
000267 2411      	CLR  R1
000268 2711      	CLR  R17
000269 2722      	CLR  R18
00026a 2733      	CLR  R19
00026b 01a9      	MOVW R20,R18
00026c e290      	LDI  R25,32
                 __DIVF212:
00026d 17ae      	CP   R26,R30
00026e 07bf      	CPC  R27,R31
00026f 0786      	CPC  R24,R22
000270 0741      	CPC  R20,R17
000271 f030      	BRLO __DIVF213
000272 1bae      	SUB  R26,R30
000273 0bbf      	SBC  R27,R31
000274 0b86      	SBC  R24,R22
000275 0b41      	SBC  R20,R17
000276 9408      	SEC
000277 c001      	RJMP __DIVF214
                 __DIVF213:
000278 9488      	CLC
                 __DIVF214:
000279 1f55      	ROL  R21
00027a 1f22      	ROL  R18
00027b 1f33      	ROL  R19
00027c 1c11      	ROL  R1
00027d 1faa      	ROL  R26
00027e 1fbb      	ROL  R27
00027f 1f88      	ROL  R24
000280 1f44      	ROL  R20
000281 959a      	DEC  R25
000282 f751      	BRNE __DIVF212
000283 01f9      	MOVW R30,R18
000284 2d61      	MOV  R22,R1
000285 914f      	POP  R20
000286 913f      	POP  R19
000287 912f      	POP  R18
000288 911f      	POP  R17
000289 2366      	TST  R22
00028a f032      	BRMI __DIVF215
00028b 0f55      	LSL  R21
00028c 1fee      	ROL  R30
00028d 1fff      	ROL  R31
00028e 1f66      	ROL  R22
00028f 957a      	DEC  R23
000290 f24b      	BRVS __DIVF217
                 __DIVF215:
000291 de88      	RCALL __ROUND_REPACK
000292 915f      	POP  R21
000293 9508      	RET
                 
                 _delay_ms:
000294 9610      	adiw r26,0
000295 f039      	breq __delay_ms1
                 __delay_ms0:
000296 95a8      	wdr
                +
000297 ea80     +LDI R24 , LOW ( 0xFA0 )
000298 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000299 9701     +SBIW R24 , 1
00029a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00029b 9711      	sbiw r26,1
00029c f7c9      	brne __delay_ms0
                 __delay_ms1:
00029d 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  26 r1 :  21 r2 :   0 r3 :   0 r4 :   2 r5 :   1 r6 :   4 r7 :   1 
r8 :   7 r9 :   3 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   6 r17:  12 r18:  13 r19:  12 r20:  22 r21:  59 r22:  51 r23:  40 
r24:  30 r25:  30 r26:  30 r27:  23 r28:   1 r29:   1 r30:  95 r31:  42 
x  :   3 y  :   4 z  :   7 
Registers used: 27 out of 35 (77.1%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :   8 
adiw  :   4 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   0 break :   0 breq  :  12 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   3 brmi  :   7 brne  :  15 brpl  :   6 brsh  :   0 brtc  :   1 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  :   0 
cbi   :   0 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  24 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   8 
cp    :   3 cpc   :   5 cpi   :  17 cpse  :   0 dec   :   8 des   :   0 
elpm  :   0 eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   4 inc   :   2 jmp   :  36 ld    :   2 ldd   :   0 
ldi   :  68 lds   :   4 lpm   :   7 lsl   :  11 lsr   :   2 mov   :  27 
movw  :  27 mul   :   9 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   0 ori   :   0 out   :  16 pop   :  18 push  :  17 rcall :  37 
ret   :  22 reti  :   0 rjmp  :  33 rol   :  24 ror   :  12 sbc   :   7 
sbci  :   7 sbi   :   0 sbic  :   0 sbis  :   1 sbiw  :   6 sbr   :   0 
sbrc  :   0 sbrs  :   1 sec   :   3 seh   :   0 sei   :   0 sen   :   0 
ser   :   8 ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :   5 std   :   0 sts   :   5 sub   :   4 subi  :   3 
swap  :   0 tst   :  14 wdr   :   1 
Instructions used: 62 out of 117 (53.0%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00053c   1330     10   1340  131072   1.0%
[.dseg] 0x000100 0x000504      0      4      4    4096   0.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 6 warnings
