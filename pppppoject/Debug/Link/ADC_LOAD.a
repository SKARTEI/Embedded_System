;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;void AD_DS(int);
;void CHECK1();
;void CHECK2();
;void NEGLECT1();
;void NEGLECT2();
;
;float fval;
;int ival, second = 0, i;
;
;void main(void)
; 0000 000E {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 000F     int ad_val;
; 0000 0010 
; 0000 0011     DDRC = 0xFF;
;	ad_val -> R16,R17
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0012     PORTC = 0b00000000;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0013 
; 0000 0014     ADMUX = 0b01000000;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0015     ADCSRA = 0x87;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0016 
; 0000 0017     SREG = 0X80;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0018 
; 0000 0019     delay_ms(10);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 001A 
; 0000 001B     while(1)
;PCODE: $0000001B VOL: 0
; 0000 001C     {
; 0000 001D         ADCSRA = 0xC7;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 001E         while((ADCSRA & 0x10) == 0);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 001F             ad_val = (int)ADCL + ((int)ADCH << 8);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0020         AD_DS(ad_val);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0021        /*
; 0000 0022         if(ival >= 100  && second == 0)
; 0000 0023             CHECK1();
; 0000 0024         else if(ival < 100  && second == 0)
; 0000 0025             NEGLECT1();
; 0000 0026         else if(ival >= 100  && second == 1)
; 0000 0027             CHECK2();
; 0000 0028         else if(ival < 100  && second == 1)
; 0000 0029             NEGLECT2();
; 0000 002A         */
; 0000 002B         if(ival >= 100)
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 002C         {
; 0000 002D             if (ADMUX == 0b01000000)
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 002E                 CHECK1();
;PCODE: $00000033 VOL: 0
; 0000 002F             else
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0030                 CHECK2();
;PCODE: $00000036 VOL: 0
; 0000 0031         }
;PCODE: $00000037 VOL: 0
; 0000 0032 
; 0000 0033         else
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0034         {
; 0000 0035             if (ADMUX == 0b01000000)
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0036                 NEGLECT1();
;PCODE: $0000003D VOL: 0
; 0000 0037             else
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0038                 NEGLECT2();
;PCODE: $00000040 VOL: 0
; 0000 0039         }
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 003A 
; 0000 003B     }
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 003C }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;
;void AD_DS(int val)
; 0000 003F {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0040     fval = (float)val * 5.0 / 1023.0;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;	val -> R16,R17
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0041     ival = (int)(fval * 100.0 + 0.5);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0042 }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;void CHECK1()
; 0000 0044 {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0045 
; 0000 0046     PORTC = 0b10000000;   //b
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0047     second = 1;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0048     for (i = 0; i < 3; i++)
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0049         delay_ms(1000);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 004A ADMUX = 0b01000011;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 004B 
; 0000 004C }
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;
;void CHECK2()
; 0000 004F {
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0050     PORTC = 0b01000000;    //g
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0051     second = 0;
;PCODE: $0000007E VOL: 0
; 0000 0052     for (i = 0; i < 3; i++)
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0053         delay_ms(1000);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0055 }
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;
;void NEGLECT1()
; 0000 0058 {
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0059     PORTC = 0b00000000;    // x
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 005A     delay_ms(5);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 005B     second = second;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 005C }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;
;void NEGLECT2()
; 0000 005F {
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0060     PORTC = 0b00100000;    //r
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0061     delay_ms(5);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0062     second = second;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0063 }
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
