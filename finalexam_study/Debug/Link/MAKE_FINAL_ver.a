;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define FUNCSET       0x28    // Function Set
;#define ENTMODE          0x06    // Entry Mode Set
;#define ALLCLR        0x01    // All Clear
;#define DISPON        0x0c     // Display On
;#define LINE2         0xC0    // 2nd Line Move
;void LCD_init(void);
;void LCD_String(char flash *);
;void Busy(void);
;void Command(unsigned char);
;void Data(unsigned char);
;
;void AD_DS(int);
;void LOAD_CHECK();
;void NEGLECT();
;void LCD_IDLE();
;void LCD_mov();
;
; /*
;void initial_go();
;void initial_back();
;void GO_1();
;void BACK_1();
;void GO_2();
;void BACK_2();
;void GO_3();
;void BACK_3();
;void GO_4();
;void BACK_4();
;void straight_1sec(int);
;void left_45(int);
;void right_45(int);
;void backward_1sec(int);
;          */
;
;float fval;
;int ival;
;unsigned int state_flag = 0, timer_counting = 0;
;
;unsigned char R_num , S_num;
;
;void main(void)
; 0000 002D {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 002E     int ad_val, i;
; 0000 002F     unsigned char SW;
; 0000 0030 
; 0000 0031     DDRA = 0xFF;
;	ad_val -> R16,R17
;	i -> R18,R19
;	SW -> R21
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0032     DDRC = 0xFF;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0033     DDRE = 0x0;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0034     PORTA = 0b00000000; // DC motor driver
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0035     PORTC = 0b00000010; // 3 color led
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0036 
; 0000 0037     TIMSK = 0x04;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0038     TCCR1A = 0x0;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0039     TCCR1B = 0x05;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003A     TCCR1C = 0x0;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003B     TCNT1 = 49911; // 1s
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 003C 
; 0000 003D     ADMUX = 0b01000010;   // PE2
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003E     ADCSRA = 0x87;        // 단일 변환모드
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 003F 
; 0000 0040     UCSR0A = 0x0;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0041     UCSR0B = 0b10011000;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0042     UCSR0C = 0b00000110;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0043     UBRR0H = 0;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0044     UBRR0L = 103;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0045 
; 0000 0046     SREG = 0x80;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0047 
; 0000 0048     delay_ms(10);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0049     LCD_IDLE();
;PCODE: $00000035 VOL: 0
; 0000 004A     for(i = 1 ; i <3 ; i++)
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004B         delay_ms(1000);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 004D LCD_init();
;PCODE: $00000046 VOL: 0
; 0000 004E     LCD_String("1st Load NO");
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 004F     Command(LINE2);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0050     LCD_String("2nd Load NO");
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0051 
; 0000 0052     while(1)
;PCODE: $0000004F VOL: 0
; 0000 0053     {
; 0000 0054         ADCSRA = ADCSRA | 0b01000000;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0055         while((ADCSRA & 0x10) == 0);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0056             ad_val = (int)ADCL + ((int)ADCH << 8);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0057         AD_DS(ad_val);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0058         SW = PINE & 0b00010000;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0059 
; 0000 005A         if(ival >= 140 )
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 005B             LOAD_CHECK();
;PCODE: $00000067 VOL: 0
; 0000 005C         else
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 005D             NEGLECT();
;PCODE: $0000006A VOL: 0
; 0000 005E 
; 0000 005F         if(SW == 0)
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0060         {
; 0000 0061             if(state_flag == 3)
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0062             {
; 0000 0063                 state_flag = 4;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0064                 PORTC = 0b00000010;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0065                 //initialpoint_go();
; 0000 0066             }
; 0000 0067             else if(state_flag != 3);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0068                 NEGLECT();
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0069         }
; 0000 006A     }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 006B }
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;
;interrupt [TIM1_OVF] void recheck (void)       // IR SENSOR 갱신 방법
; 0000 006E {
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 006F     TCNT1 = 49911;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0070 
; 0000 0071     if(timer_counting >=4)
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0072     {
; 0000 0073         timer_counting = 0;
;PCODE: $0000008A VOL: 0
; 0000 0074         if(state_flag == 0)
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0075             NEGLECT();
;PCODE: $0000008D VOL: 0
; 0000 0076         else if(state_flag == 1 || state_flag == 2){
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0077             LCD_init();
;PCODE: $00000098 VOL: 0
; 0000 0078             state_flag = 0;
;PCODE: $00000099 VOL: 0
; 0000 0079             ADMUX = 0b01000010;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 007A         }
; 0000 007B     }
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 007C     else
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 007D         timer_counting++;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 007E }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;
;interrupt [USART0_RXC] void USART_recieve (void)
; 0000 0081 {
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0082     R_num = UDR0;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0083     S_num = R_num;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0084 
; 0000 0085     if((state_flag == 2))   {
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0086         state_flag = 3;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0087         if(R_num == 'a')    {
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0088             LCD_mov();
;PCODE: $000000B5 VOL: 0
; 0000 0089             LCD_String("1st: 1    2nd: 2");
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 008A         }
; 0000 008B         else if(R_num == 'b')   {
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 008C             LCD_mov();
;PCODE: $000000BE VOL: 0
; 0000 008D             LCD_String("1st: 1    2nd: 3");
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 008E         }
; 0000 008F         else if(R_num == 'c')   {
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0090             LCD_mov();
;PCODE: $000000C7 VOL: 0
; 0000 0091             LCD_String("1st: 1    2nd: 4");     // 1 to 2 3 4
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0092         }
; 0000 0093         else if(R_num == 'd')   {
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0094             LCD_mov();
;PCODE: $000000D0 VOL: 0
; 0000 0095             LCD_String("1st: 2    2nd: 1");
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0096         }
; 0000 0097         else if(R_num == 'e')   {
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0098             LCD_mov();
;PCODE: $000000D9 VOL: 0
; 0000 0099             LCD_String("1st: 2    2nd: 3");
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 009A         }
; 0000 009B         else if(R_num == 'f')   {
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 009C             LCD_mov();
;PCODE: $000000E2 VOL: 0
; 0000 009D             LCD_String("1st: 2    2nd: 4");   // 2 to 1 3 4
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 009E         }
; 0000 009F         else if(R_num == 'g')   {
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00A0             LCD_mov();
;PCODE: $000000EB VOL: 0
; 0000 00A1             LCD_String("1st: 3    2nd: 1");
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00A2         }
; 0000 00A3         else if(R_num == 'h')   {
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00A4             LCD_mov();
;PCODE: $000000F4 VOL: 0
; 0000 00A5             LCD_String("1st: 3    2nd: 2");
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00A6         }
; 0000 00A7         else if(R_num == 'i')   {
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00A8             LCD_mov();
;PCODE: $000000FD VOL: 0
; 0000 00A9             LCD_String("1st: 3    2nd: 4");    // 3 to 124
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00AA         }
; 0000 00AB         else if(R_num == 'j')   {
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00AC             LCD_mov();
;PCODE: $00000106 VOL: 0
; 0000 00AD             LCD_String("1st: 4    2nd: 1");
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00AE         }
; 0000 00AF         else if(R_num == 'k')   {
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00B0             LCD_mov();
;PCODE: $0000010F VOL: 0
; 0000 00B1             LCD_String("1st: 4    2nd: 2");
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00B2         }
; 0000 00B3         else if(R_num == 'l')   {
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00B4             LCD_mov();
;PCODE: $00000118 VOL: 0
; 0000 00B5             LCD_String("1st: 4    2nd: 3");     // 4 to 123
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00B6         }
; 0000 00B7         else
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00B8             NEGLECT();
;PCODE: $0000011E VOL: 0
; 0000 00B9     }
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00BA     else if((state_flag == 1))  {
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00BB         state_flag = 3;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00BC          if(R_num == '1')    {
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00BD             LCD_mov();
;PCODE: $00000135 VOL: 0
; 0000 00BE             LCD_String("1st: 1");
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00BF         }
; 0000 00C0         else if(R_num == '2')   {
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00C1             LCD_mov();
;PCODE: $0000013E VOL: 0
; 0000 00C2             LCD_String("1st: 2");
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00C3         }
; 0000 00C4         else if(R_num == '3')   {
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00C5             LCD_mov();
;PCODE: $00000147 VOL: 0
; 0000 00C6             LCD_String("1st: 3");
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00C7         }
; 0000 00C8         else if(R_num == '4')   {
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00C9             LCD_mov();
;PCODE: $00000150 VOL: 0
; 0000 00CA             LCD_String("1st: 4");
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00CB         }
; 0000 00CC         else
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00CD             NEGLECT();
;PCODE: $00000156 VOL: 0
; 0000 00CE     }
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00CF     else
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00D0         NEGLECT();
;PCODE: $0000015D VOL: 0
; 0000 00D1 
; 0000 00D2 }
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;void LCD_mov()
; 0000 00D4 {
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00D5     LCD_init();
;PCODE: $00000165 VOL: 0
; 0000 00D6     LCD_String("MOVING POINT");
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00D7     Command(LINE2);
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00D8 }
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;
;void AD_DS(int val)
; 0000 00DB {
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00DC     fval = (float)val * 5.0 / 1023.0;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;	val -> R16,R17
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00DD     ival = (int)(fval * 100.0 + 0.5);
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00DE }
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;
;void LOAD_CHECK()
; 0000 00E1 {
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00E2     PORTC = 0b00000100;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00E3     if(state_flag == 0) // PE0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00E4     {
; 0000 00E5        LCD_init();
;PCODE: $0000018A VOL: 0
; 0000 00E6        LCD_String("1st Load OK");
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00E7        state_flag = 1;
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00E8        ADMUX = 0b01000011;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 00E9     }
; 0000 00EA     else if(state_flag == 1) //PE1
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00EB     {
; 0000 00EC         Command(LINE2);
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 00ED         LCD_String("2nd Load OK");
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00EE         state_flag = 2;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00EF         ADMUX = 0b01000010;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 00F0     }
; 0000 00F1     else
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00F2         NEGLECT();
;PCODE: $000001A2 VOL: 0
; 0000 00F3 }
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;
;void NEGLECT()
; 0000 00F6 {
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00F7     delay_ms(5);
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 00F8 }
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;//---------------BASIC MOVE---------------------
;/*void initialpoint_go()
;{
;
;}
;void initialpoint_back()
;{
;
;}
;void straight_1sec(int act_time)
;{
;    int i;
;    for(i = 1; i <= act_time; i++)
;    {
;        PORTA = 0b;
;        delay_ms(1000);
;    }
;}
;void left_45(int act_time)
;{
;    int i;
;    for(i = 1; i <= act_time; i++)
;    {
;        PORTA = 0b;
;        delay_ms(1000);
;    }
;}
;void right_45(int act_time)
;{
;    int i;
;    for(i = 1; i <= act_time; i++)
;    {
;        PORTA = 0b;
;        delay_ms(1000);
;    }
;}
;void backward_1sec(int act_time)
;{
;    int i;
;    for(i = 1; i <= act_time; i++)
;    {
;        PORTA = 0b;
;        delay_ms(1000);
;    }
;}
;
;  */
;
;//-----------------LCD-------------------
;
;void LCD_IDLE()
; 0000 012C {
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 012D     LCD_init();
;PCODE: $000001B0 VOL: 0
; 0000 012E     LCD_String("2017161041");
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 012F     Command(LINE2);
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0130     LCD_String("Serving Robot");
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0131 }
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;
;void LCD_init(void)
; 0000 0134 {
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 0135     DDRD = 0xFF;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 0136     PORTD &= 0xFB;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 0137 
; 0000 0138     delay_ms(15);
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0139     Command(0x20);
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 013A     delay_ms(5);
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 013B     Command(0x20);
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 013C     delay_us(100);
;PCODE: $000001CB VOL: 0
; 0000 013D     Command(0x20);
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 013E     Command(FUNCSET);
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 013F     Command(DISPON);
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0140     Command(ALLCLR);
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0141     Command(ENTMODE);
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0142 }
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;
;void LCD_String(char flash *str)
; 0000 0145 {
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0146     char flash *pStr=0;
; 0000 0147 
; 0000 0148     pStr = str;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;	*str -> R18,R19
;	*pStr -> R16,R17
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0149     while(*pStr) Data(*pStr++);
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 014A }
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;
;void Command(unsigned char byte)
; 0000 014D {
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 014E     Busy();
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;	byte -> R17
;PCODE: $000001F4 VOL: 0
; 0000 014F 
; 0000 0150     PORTD = (byte & 0xF0);        // 데이터
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 0151     PORTD &= 0xFE;            //RS = 0;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0152     PORTD &= 0xFD;            //RW = 0;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 0153     delay_us(1);
;PCODE: $000001FC VOL: 0
; 0000 0154     PORTD |= 0x04;            //E = 1;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0155     delay_us(1);
;PCODE: $000001FF VOL: 0
; 0000 0156     PORTD &= 0xFB;            //E = 0;
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0157 
; 0000 0158     PORTD = ((byte<<4) & 0xF0);    // 데이터
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0159     PORTD &= 0xFE;            //RS = 0;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 015A     PORTD &= 0xFD;            //RW = 0;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 015B     delay_us(1);
;PCODE: $0000020A VOL: 0
; 0000 015C     PORTD |= 0x04;            //E = 1;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 015D     delay_us(1);
;PCODE: $0000020D VOL: 0
; 0000 015E     PORTD &= 0xFB;            //E = 0;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 015F }
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;
;void Data(unsigned char byte)
; 0000 0162 {
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 0163     Busy();
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;	byte -> R17
;PCODE: $00000217 VOL: 0
; 0000 0164 
; 0000 0165     PORTD = (byte & 0xF0);        // 데이터
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0166     PORTD |= 0x01;            //RS = 1;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 0167     PORTD &= 0xFD;            //RW = 0;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0168     delay_us(1);
;PCODE: $0000021F VOL: 0
; 0000 0169     PORTD |= 0x04;            //E = 1;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 016A     delay_us(1);
;PCODE: $00000222 VOL: 0
; 0000 016B     PORTD &= 0xFB;            //E = 0;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 016C 
; 0000 016D     PORTD = ((byte<<4) & 0xF0);      // 데이터
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 016E     PORTD |= 0x01;            //RS = 1;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 016F     PORTD &= 0xFD;            //RW = 0;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 0170     delay_us(1);
;PCODE: $0000022D VOL: 0
; 0000 0171     PORTD |= 0x04;            //E = 1;
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 0172     delay_us(1);
;PCODE: $00000230 VOL: 0
; 0000 0173     PORTD &= 0xFB;            //E = 0;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 0174 }
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;
;void Busy(void)
; 0000 0177 {
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 0178     delay_ms(2);
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 0179 }
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
